import chai from 'chai'
import Big from 'big.js'
const { assert } = chai

import aroon from './index'

export default () => {
  describe('Input', () => {
    it('should throw error with wrong timeperiod param', () => {
      assert.throws(aroon.bind(null, [Big(1)], [Big(0)], null), Error, 'Timeperiod should be an instance of Big or string!')
    })
    it('should throw error with wrong values', () => {
      assert.throws(aroon.bind(null, [Big(1)], [null], '12'), Error, 'Input value should be an instance of Big or NaN!')
      assert.throws(aroon.bind(null, [null], [Big(1)], '12'), Error, 'Input value should be an instance of Big or NaN!')
    })
  })
  describe('Output', () => {
    let input = {
      high: ['11711.47', '11698.22', '11742.68', '11736.74', '11726.94', '11677.33', '11704.12', '11782.23', '11757.25', '11794.15', '11858.78', '11861.24', '11845.16', '11905.48', '11982.94', '11985.97', '12020.52', '12019.53', '11891.93', '12050.75', '12057.91', '12080.54', '12092.42', '12188.76', '12238.79', '12254.23', '12239.66', '12285.94', '12276.21', '12267.66', '12303.16', '12331.31', '12389.82', '12221.12', '12129.62', '12151.03', '12235.04', '12261.38', '12115.12', '12283.10', '12243.44', '12251.20', '12257.82', '12211.43', '12087.01', '12042.13', '11988.69', '11856.70', '11800.54', '11927.09', '12078.30', '12050.98', '12116.14', '12191.18', '12259.79', '12272.92', '12285.41', '12383.46', '12381.68', '12419.71', '12407.41', '12438.14', '12450.93', '12440.56', '12011.66', '12120.80', '12075.20', '11990.02', '12072.89', '12217.33', '12207.99', '12108.73', '12057.19', '12098.81', '12190.43', '12284.39', '12427.09', '12596.13', '12601.80', '12643.24', '12753.89', '12717.90', '12655.84', '12570.58', '12611.04', '12581.98', '12504.82', '12475.26', '12607.56', '12603.51', '12751.43', '12740.87', '12679.95', '12593.40', '12498.65', '12384.90', '12243.07', '12282.42', '12130.30', '11904.91', '11893.94', '11555.41', '11434.09', '11244.01', '11228.00', '11278.90', '11346.67', '11484.60', '11488.01', '11529.67', '11406.50', '11086.40', '11020.55', '11176.84', '11331.57', '11406.39', '11326.43', '11541.78', '11630.07', '11712.60', '11716.84', '11492.14', '11237.46', '11414.86', '11477.30', '11294.83', '11062.03', '11140.85', '11386.78', '11433.40', '11532.47', '11506.82', '11550.22', '11447.86', '11122.12', '10808.49', '11057.49', '11369.30', '11317.08', '11271.14', '11152.39', '10979.19', '10825.44', '10950.89', '11132.60', '11232.05', '11433.33', '11447.86', '11625.30', '11518.09', '11646.83', '11643.35', '11652.74', '11633.70', '11581.25', '11812.46', '11940.75', '11912.86', '11891.21', '12284.31', '12251.92', '12229.29', '11951.76', '11876.83', '12065.93', '12043.49', '12074.44', '12187.51', '12166.40', '11961.14', '12179.72', '12170.56', '12165.11', '12109.03'],
      low: ['11577.35', '11635.74', '11652.89', '11667.46', '11599.68', '11573.87', '11635.48', '11673.62', '11700.53', '11698.83', '11777.99', '11798.46', '11744.77', '11822.80', '11867.98', '11898.74', '11961.83', '11971.93', '11817.88', '11892.50', '12018.51', '11981.05', '12025.78', '12092.30', '12150.05', '12188.19', '12156.94', '12180.48', '12235.91', '12193.27', '12219.79', '12253.24', '12176.31', '12063.43', '11983.17', '12060.93', '12130.15', '12054.99', '12018.63', '12068.01', '12041.60', '12072.21', '12156.60', '11974.39', '11936.32', '11897.31', '11696.25', '11555.48', '11614.82', '11777.23', '11860.11', '12002.85', '11972.61', '12087.54', '12170.71', '12197.88', '12173.51', '12280.07', '12319.01', '12321.02', '12369.15', '12353.34', '12386.66', '12328.36', '11917.78', '11951.38', '11862.53', '11875.77', '11962.51', '12081.18', '12105.85', '11874.94', '11925.42', '11934.05', '12042.28', '12175.86', '12262.10', '12404.08', '12540.58', '12539.21', '12627.23', '12567.41', '12470.30', '12446.88', '12447.33', '12414.41', '12406.09', '12296.23', '12385.96', '12546.56', '12566.61', '12644.19', '12536.19', '12489.04', '12289.69', '12226.83', '12083.45', '11998.08', '11865.56', '11700.34', '11372.14', '11139.00', '10809.85', '10604.07', '10686.49', '10729.85', '11142.18', '11269.85', '11292.63', '11322.30', '10881.60', '10801.41', '10820.37', '10854.43', '11113.04', '11106.76', '10929.20', '11286.58', '11429.39', '11528.08', '11488.46', '11211.35', '10932.53', '11137.63', '11283.74', '10935.64', '10824.76', '10987.18', '10993.84', '11247.49', '11407.41', '11255.25', '11373.92', '11117.28', '10597.14', '10638.73', '10771.78', '11045.23', '10996.98', '10965.45', '10909.52', '10653.34', '10404.49', '10738.10', '10858.67', '11051.13', '11104.56', '11365.67', '11417.28', '11377.82', '11478.66', '11378.35', '11296.12', '11469.17', '11391.14', '11542.84', '11805.77', '11682.52', '11694.36', '11872.07', '12164.24', '11954.41', '11630.03', '11658.49', '11835.43', '11850.31', '11880.69', '12002.17', '11736.93', '11779.88', '11896.28', '12027.03', '12001.26', '11890.57']
    }
    Object.keys(input).forEach(key => {
      input[key] = input[key].map(Big)
    })

    let output = {
      up: ['NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', '100.00', '100.00', '100.00', '95.83', '100.00', '95.83', '91.67', '100.00', '100.00', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '100.00', '100.00', '95.83', '100.00', '95.83', '100.00', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '100.00', '100.00', '100.00', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '4.17', '4.17', '4.17', '4.17', '8.33', '4.17', '4.17', '4.17', '4.17', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '50.00', '45.83', '41.67', '37.50', '100.00', '95.83', '100.00', '95.83', '100.00', '95.83', '91.67', '100.00', '100.00', '95.83', '91.67', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67'],
      down: ['NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', 'NaN', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '4.17', '8.33', '4.17', '12.50', '8.33', '4.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '100.00', '100.00', '100.00', '100.00', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '4.17', '4.17', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '4.17', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '4.17', '25.00', '20.83', '16.67', '12.50', '8.33', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '100.00', '95.83', '91.67', '87.50', '83.33', '79.17', '75.00', '70.83', '66.67', '62.50', '58.33', '54.17', '50.00', '45.83', '41.67', '37.50', '33.33', '29.17', '25.00', '20.83', '16.67', '12.50', '8.33', '4.17', '4.17', '4.17', '4.17', '4.17', '25.00', '20.83', '16.67', '12.50']
    }
    let result = aroon(input['high'], input['low'], '24')
    it('should return an object contain properties of "up", "down"', () => {
      assert.property(result, 'up')
      assert.property(result, 'down')
    })
    it('Each properties should be an array', () => {
      assert.isTrue(Array.isArray(result['up']))
      assert.isTrue(Array.isArray(result['down']))
    })
    it('should return correct values', () => {
      for (let i = 0; i < result['up'].length; i++) {
        (['up', 'down']).forEach(key => {
          assert.isTrue(result[key][i].toFixed(2) === output[key][i])
        })
      }
    })
  })
}
